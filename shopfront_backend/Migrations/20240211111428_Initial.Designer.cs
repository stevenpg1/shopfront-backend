// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using shopfront_backend.DatabaseContext;

#nullable disable

namespace shopfront_backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240211111428_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("shopfront_backend.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("shopfront_backend.Models.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("StockItemId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("StockItemId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("shopfront_backend.Models.StockItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StockCount")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("StockItems");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9f1d81e9-1a19-441b-8cf1-127c819836c5"),
                            Name = "Hammer",
                            StockCount = 100,
                            UnitPrice = 12.99m
                        },
                        new
                        {
                            Id = new Guid("2a327e00-933a-4440-aebf-c6fa83895e1d"),
                            Name = "Spanner",
                            StockCount = 500,
                            UnitPrice = 7.99m
                        },
                        new
                        {
                            Id = new Guid("b70d0bb7-ae17-4b96-b241-1e10c38ad8eb"),
                            Name = "Wrench",
                            StockCount = 40,
                            UnitPrice = 21.99m
                        },
                        new
                        {
                            Id = new Guid("8ba5622a-fb02-4b90-8a9f-7b2b89ba394f"),
                            Name = "Screwdriver Set",
                            StockCount = 45,
                            UnitPrice = 11.99m
                        },
                        new
                        {
                            Id = new Guid("3a014bcb-77f0-4fc4-90b1-6fec398a6d3d"),
                            Name = "Toolbox",
                            StockCount = 10,
                            UnitPrice = 45.99m
                        },
                        new
                        {
                            Id = new Guid("fdc7ef07-512b-46b7-a9fd-bf1022b3806a"),
                            Name = "Box of 50 2inch Nails",
                            StockCount = 50,
                            UnitPrice = 2.99m
                        });
                });

            modelBuilder.Entity("shopfront_backend.Models.OrderItem", b =>
                {
                    b.HasOne("shopfront_backend.Models.Order", null)
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId");

                    b.HasOne("shopfront_backend.Models.StockItem", "StockItem")
                        .WithMany()
                        .HasForeignKey("StockItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StockItem");
                });

            modelBuilder.Entity("shopfront_backend.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
